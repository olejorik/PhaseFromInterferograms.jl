var documenterSearchIndex = {"docs":
[{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"EditURL = \"../../../tutorials/FindingTilts.jl\"","category":"page"},{"location":"tutorials/FindingTilts/#Finding-tilts-from-the-autocorrelation-function","page":"Finding tilts","title":"Finding tilts from the autocorrelation function","text":"","category":"section"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"The algorithm uses the maxima of the autocorrelation spectra to deduce the tilt parameters. For this purpoes, a simple function fourier_tilt is provided. Here we demonstrate its work.","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"First, construct a tilt (a linear function) with this function","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"using PhasePlots, PhaseUtils\nusing CairoMakie\nusing FFTW, FFTViews\nusing PhaseFromInterferograms\nusing PhaseFromInterferograms: fourier_tilt, getslopes\nusing LaTeXStrings\n\narrsize = (50, 35)\ni, j = 3, 8\nf1, f2 = getindex.(fftfreq.(arrsize), [i, j])\noffset = 2\ntilt = fourier_tilt(2π .* (f1, f2), offset, arrsize)\nshowarray(tilt; axis=(title=L\"Linear function $t(x)$ \",), rot=0)","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"and we can see that in the exponent it will create the linear phase term.","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"sig = cis.(tilt)\nshowarray(angle.(sig); axis=(title=L\"Linear function $t(x)$ , wrapped\",), rot=0)","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"Now examine its Fourier spectrum","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"spec = fft(sig)\nshowarray(\n    abs.(spec);\n    axis=(title=\"Power spectrum of the complex exponent of linear function\",),\n    rot=0,\n)","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"Note that the only non-zero component has index (i,j)","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"scatter!(i, j; color=:red)\ncurrent_figure()","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"And its argument produces the original offset","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"angle(spec[i, j]) ≈ offset","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"Repeat the same example with subpixel coordinates","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"subpixelshifts = [0.1, 0.52]\n# subpixelshifts = rand(2) # or use rand(2)\nf1s, f2s = [f1, f2] .+ subpixelshifts ./ arrsize","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"Construct the tilt with subpixel frequencies.","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"tilts = fourier_tilt(2π .* (f1s, f2s), offset, arrsize)\nshowarray(tilts; axis=(title=L\"Linear function $t(x)$ \",), rot=0)","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"It doesn't produce a periodic signal anymore!","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"sigs = cis.(tilts)\nshowarray(angle.(sigs); axis=(title=L\"Linear function $2\\pi t(x)$ , wrapped\",), rot=0)","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"And that's why the Fourier spectrum demonstrates aliasing","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"specs = fft(sigs)\nshowarray(\n    abs.(specs);\n    axis=(title=\"Power spectrum of the complex exponent of linear function\",),\n    rot=0,\n)","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"We can detect frequencies both in periodic and non-periodic signals. We start with the periodic complex signal","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"Our algorithm  for the complex signal should behave the same at zoom level 1 as making the Fourier transform and taking the component with the max coordinate","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"(fhat, sigma), amp_hist, freqs_hist = findfirstharmonic2(sig; zoomlevels=[1])\n@show fhat\n@show sigma\n@show all(fhat .≈ (f1, f2))\n@show sigma .≈ offset","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"The results are, of course, the same for other zoom levels","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"for zl in [[1], [1, 2], [1, 8], [1, 2, 16], nothing]\n    fhat, sigma = findfirstharmonic2(sig; zoomlevels=zl)[1]\n    fhat = flipsign.(fhat, fhat[1])\n    # @test all(fhat .≈ [f1, f2])\n    @show fhat\n    @show sigma\nend","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"Check it on the real signal","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"for zl in [[1], [1, 2], [1, 8], [1, 2, 16], nothing]\n    fhat, sigma = findfirstharmonic2(real.(sig); zoomlevels=zl)[1]\n    sigma = flipsign(sigma, fhat[1])\n    fhat = flipsign.(fhat, fhat[1])\n    # @test all(fhat .≈ [f1, f2])\n    @show fhat\n    @show sigma\nend","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"And now check on the real non-periodic signal","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"scales = Int32[]\nrelerrsX = Float64[]\nrelerrsY = Float64[]\nsigmas = Float32[]\nfor zl in [[1], [1, 2], [1, 4], [1, 8], [1, 4, 16], nothing]\n    fhat, sigma = findfirstharmonic2(real.(sigs); zoomlevels=zl)[1]\n    sigma = flipsign(sigma, fhat[1])\n    fhat = flipsign.(fhat, fhat[1])\n    scale = isnothing(zl) ? minimum(arrsize) : last(zl)\n    # @test all(abs.(fhat .- [f1s, f2s]) .* arrsize .* scale .< 0.50001) # approximately 0.5\n    relerr = abs.(fhat .- [f1s, f2s]) .* arrsize\n    @show scale\n    @show fhat\n    @show sigma\n    push!(scales, scale)\n    push!(relerrsX, relerr[1])\n    push!(relerrsY, relerr[2])\n    push!(sigmas, sigma)\nend","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"We see that the error is decreasing with scale","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"fig, ax, p = lines(scales, 0.5 ./ scales; label=\"0.5/scale\", linestyle=:dot);\nscatter!(scales, relerrsX; label=\"X\")\nscatter!(scales, relerrsY; label=\"Y\")\nlines!(scales, sqrt.(relerrsX .^ 2 .+ relerrsY .^ 2); label=\"joint x and y\")\nax.title = \"Relative error in frequency detection\"\naxislegend()\nfig","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"The offset error also decreases","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"fig, ax, l = lines(scales, sigmas; label=\"restored\")\nhlines!(offset; label=\"GT\", color=:orange)\naxislegend()\nax.title = \"Offset detection\"\nfig","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"Thus, only from the real signal we have restored the parameters of its main harmonics (we have used however the a priory knowledge about the sign of the tilt). Finally, we can reconstruct the tilt from the found frequencies using the same function","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"fhat, sigma = findfirstharmonic2(real.(sigs))[1]\nsigma = flipsign(sigma, fhat[1])\nfhat = flipsign.(fhat, fhat[1])\nrestored_tilt = fourier_tilt(2π * fhat, sigma, arrsize)\nfig, ax, hm = showarray(restored_tilt; axis=(title=L\"Restored function $t(x)$ \",), rot=0);\nColorbar(fig[1, 2], hm)\nfig","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"And we check the error in the restoration","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"err_tilt = restored_tilt .- tilts\nfig, ax, hm = showarray(err_tilt; axis=(title=L\"Error $t(x) - \\hat{t}(x)$ \",), rot=0);\nColorbar(fig[1, 2], hm)\nfig","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"We see that the errror is quite small compared with the size of the tilt itself.","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"","category":"page"},{"location":"tutorials/FindingTilts/","page":"Finding tilts","title":"Finding tilts","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PhaseFromInterferograms","category":"page"},{"location":"#PhaseFromInterferograms","page":"Home","title":"PhaseFromInterferograms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PhaseFromInterferograms, Windowing, FindHarmonics, zoomFFT2D]","category":"page"},{"location":"#PhaseFromInterferograms.FineTilts","page":"Home","title":"PhaseFromInterferograms.FineTilts","text":" FineTilts <: TiltExtractionAlg\n\nMethod of extracting tilts from an array of the interferogram differences based on locating maxima in the spectra with subpixel accuracy using zoomFFT (aka CZT or Bluestein algorithm).\n\nParameters:\n\nerasesize = 2 – half-diameter of the central lobe to be excluded: block with size 2 erasesize + 1 centered around the origin\ncropsize = 2 – half diameter of the side lobe used tolocate the maximum: block with size 2 cropsize + 1 centerd around the maximum of the spectrum.\nzoomlevels = nothing – array of zoomlevels used for iterational subpixel approximation. E.g. zoomlevels = [1,4] will first find the side lobe maximum in the original Fourier spectrum , and then in the spectrum sampled with 4 times higher rate. If set to nothing uses automatic sequence of the zoom levels.\nnormals = [nothing] – array of the normals defining the half plane where the maximum is located.\n\n\n\n\n\n","category":"type"},{"location":"#PhaseFromInterferograms.PSIAlg","page":"Home","title":"PhaseFromInterferograms.PSIAlg","text":"PSIAlg <: AbstractAlg\n\nAn abstract algorithm for Phase-shifting Interferometry (PSI).\n\nConcrete instances are callable or can be used in get_phase_from_n_psi functions:\n\n`(alg::PSIAlg)(measurements, deltas)`\n\nextracts the phase ϕ from several measurements Iₖ = b + a cos(ϕ + δₖ).\n\ndeltas is an array of δₖ and it should be the same length as the number of measurements or one less. In this case, δ₁ is asuumed to be zero.\n\nSee also get_phase_from_n_psi](@ref).\n\n\n\n\n\n","category":"type"},{"location":"#PhaseFromInterferograms.RoughTilts","page":"Home","title":"PhaseFromInterferograms.RoughTilts","text":" RoughTilts <: TiltExtractionAlg\n\nSimple method of extracting approximate tilts from an array of the interferogram differences based on the Fourier filtering.\n\nParameters:\n\nerasesize = 2 – half-diameter of the central lobe to be excluded: block with size 2 erasesize + 1 centered around the origin\nselectsize = 2 – half diameter of the side lobe used to reconstruct the tilt: block with size 2 selectsize + 1 centerd around the maximum of the spectrum.\n\n\n\n\n\n","category":"type"},{"location":"#PhaseFromInterferograms.TiltExtractionAlg","page":"Home","title":"PhaseFromInterferograms.TiltExtractionAlg","text":"TiltExtractionAlg <: AbstractAlg\n\nAbstract algorithm for retrieval tilts from interferogram differences.\n\nConcrete instances of the type are callable:\n\n`(alg::TiltExtractionAlg)(idiffs)` -> tilts\n\nor can be used in gettilts function.\n\nSee also gettilts.\n\n\n\n\n\n","category":"type"},{"location":"#PhaseFromInterferograms.fourier_tilt","page":"Home","title":"PhaseFromInterferograms.fourier_tilt","text":"fourier_tilt(τ, σ, arrsize, fftshift = false)\n\nConstruct an array of values of linear function t(x) = τ⋅x +σ compatible with Fourier transform coordinates, that is T(ξ)=F(exp(i t(x))) has maximum at ξ=τ/(2π). Coordinates: ξ is defined by fftfreq, x defined with the origin at arrsize÷2+1 for fftshift = true and with the origin at at the first element of the array if fftshift = false.\n\n\n\n\n\n","category":"function"},{"location":"#PhaseFromInterferograms.get_LS_phase_from_n_psi-Tuple{Any, Any}","page":"Home","title":"PhaseFromInterferograms.get_LS_phase_from_n_psi","text":"get_LS_ phase_from_n_psi(images, deltas)\n\nGiven n interferometric images with known phase shifts deltas between them, reconstruct the phase using the least-squares diversity-based method.\n\n\n\n\n\n","category":"method"},{"location":"#PhaseFromInterferograms.get_diff_phase_from_n_psi-Tuple{Any, Any}","page":"Home","title":"PhaseFromInterferograms.get_diff_phase_from_n_psi","text":"get_diff_phase_from_n_psi(images, deltas)\n\nGiven n+1 interferometric images with n known phase shifts deltas between them, reconstruct the phase using the phase-difference-based approach.\n\n\n\n\n\n","category":"method"},{"location":"#PhaseFromInterferograms.get_phase_from_n_psi-Tuple{Any, Any, PSIAlg}","page":"Home","title":"PhaseFromInterferograms.get_phase_from_n_psi","text":"get_phase_from_n_psi(images, deltas, alg::PSIAlg; kwargs...)\n\nRetreive phase from several interferograms obtained with phase-shifting interferometry.\n\n\n\n\n\n","category":"method"},{"location":"#PhaseFromInterferograms.get_tilt","page":"Home","title":"PhaseFromInterferograms.get_tilt","text":"get_tilt(idiff, erasesize=3, selectsize=3, debug=false)\n\nGet the approximate tilt from the interferogram difference through the inverse Fourier of the part of the Fourier spectrum of idiff loacated around the position of the maximal side lobe.\n\nParameters:\n\nerasesize – minimal distance from the sidelobe to the DC component\nselectsize – number of the neigbour Fourier components to include in the tilt reconstruction.\n\n\n\n\n\n","category":"function"},{"location":"#PhaseFromInterferograms.getfinetilt-Tuple{Any}","page":"Home","title":"PhaseFromInterferograms.getfinetilt","text":"getfinetilt(idiff; n=[1, 0], zoomlevels=nothing, visualdebug=false, erasesize=2, cropsize=2) -> tilt, τ, σ\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#PhaseFromInterferograms.gettilts-Tuple{Any, TiltExtractionAlg}","page":"Home","title":"PhaseFromInterferograms.gettilts","text":"gettilts(idiffs, alg::TiltExtractionAlg)\n\nExtract tilts from the interferogram differences idiffs using alg method. Return tilts and additional information depending on the method used.\n\n\n\n\n\n","category":"method"},{"location":"#PhaseFromInterferograms.Windowing.GaussianWindow","page":"Home","title":"PhaseFromInterferograms.Windowing.GaussianWindow","text":"GaussianWindow(w) is an object corresponding to a centerd gaussian window  `w` pixels wide.\n\n`w` can be a single number or a tuple, with specified width for each dimension.\n\n\n\n\n\n","category":"type"},{"location":"#PhaseFromInterferograms.FindHarmonics.eraseZerothOrder!-Tuple{Any}","page":"Home","title":"PhaseFromInterferograms.FindHarmonics.eraseZerothOrder!","text":"eraseZerothOrder(spectrum, method = \"block\"; erasesize = 3)\n\nErase the zeroth order in the spectrum. Currently impemented methods:\n\n\"block\" – set to zero a cube of width 2*erasesize +1 around the DC frequency.\n\n\n\n\n\n","category":"method"},{"location":"#PhaseFromInterferograms.FindHarmonics.findfineharmonic-Tuple{Any, Any, Any}","page":"Home","title":"PhaseFromInterferograms.FindHarmonics.findfineharmonic","text":"findfineharmonic(array, h, params)\n\nDocument this function\n\n\n\n\n\n","category":"method"},{"location":"#PhaseFromInterferograms.FindHarmonics.findroughharmonic-Tuple{Any}","page":"Home","title":"PhaseFromInterferograms.FindHarmonics.findroughharmonic","text":"findroughharmonic(array, params)\n\nDocument this function\n\n\n\n\n\n","category":"method"},{"location":"#PhaseFromInterferograms.zoomFFT2D.FFT2Zoom-NTuple{6, Any}","page":"Home","title":"PhaseFromInterferograms.zoomFFT2D.FFT2Zoom","text":"FFT2Zoom(M,N,R,S,αx, αy)\n\nStructure containing necessary arrays for calculation of zoomed 2D FFT\n\n\n\n\n\n","category":"method"},{"location":"#PhaseFromInterferograms.zoomFFT2D.FFT2Zoom-Tuple{Any}","page":"Home","title":"PhaseFromInterferograms.zoomFFT2D.FFT2Zoom","text":"(f::FFT2Zoom)(x)\n\nCalculate zoomed FFT of x\n\n\n\n\n\n","category":"method"},{"location":"#PhaseFromInterferograms.zoomFFT2D.expsquared-Tuple{Any, Any}","page":"Home","title":"PhaseFromInterferograms.zoomFFT2D.expsquared","text":"expsquared(x, coef)\n\nCalculate exp(coef * x^2)\n\n\n\n\n\n","category":"method"},{"location":"#PhaseFromInterferograms.zoomFFT2D.findfirstharmonic2-Tuple{Any}","page":"Home","title":"PhaseFromInterferograms.zoomFFT2D.findfirstharmonic2","text":"findfirstharmonic2(a, zoomlevels = nothing) ->(freqs, amp), amp_hist, freqs_hist\n\nFind first harmonic in a 2D array a with subpixel precision, using sequential FFT2Zoom with zoomlevels\n\n\n\n\n\n","category":"method"},{"location":"#PhaseFromInterferograms.zoomFFT2D.removeDC","page":"Home","title":"PhaseFromInterferograms.zoomFFT2D.removeDC","text":"removeDC(a, size = 2)\n\nRemove the zeroth lobe of width 2*size+1 from the signal\n\n\n\n\n\n","category":"function"}]
}
